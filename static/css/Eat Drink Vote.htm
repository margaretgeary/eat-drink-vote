<!DOCTYPE html>
<!-- saved from url=(0024)http://0.0.0.0:5000/quiz -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>Eat Drink Vote</title>
  <link rel="stylesheet" href="./Eat Drink Vote_files/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
  <link rel="preconnect" href="https://fonts.gstatic.com/">
  <link rel="preconnect" href="https://fonts.gstatic.com/">
  <link href="./Eat Drink Vote_files/css2" rel="stylesheet">
    <link rel="stylesheet" href="./Eat Drink Vote_files/style.css">
    <link rel="icon" href="data:,">
  <!-- React dependencies -->
  <script src="./Eat Drink Vote_files/babel.js" crossorigin=""></script>
  <script src="./Eat Drink Vote_files/react.development.js" crossorigin=""></script>
  <script src="./Eat Drink Vote_files/react-dom.development.js" crossorigin=""></script>
  <script src="./Eat Drink Vote_files/react-router-dom.min.js" integrity="sha512-NG4Cm3Ubs7d/nPyzrTFM53RP8tPjQhRT0hea48yJ/qEXsuhq7wGbjX68A5gBiW6BoCQbqE3/M+UOj2lLXPauhw==" crossorigin="anonymous"></script>
  <script src="./Eat Drink Vote_files/react-bootstrap.min.js" crossorigin=""></script>
  <link rel="stylesheet" href="./Eat Drink Vote_files/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
<script>"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function Donor(_ref) {
    var orgname = _ref.orgname,
        totalAmount = _ref.totalAmount;

    var _React$useState = React.useState(false),
        _React$useState2 = _slicedToArray(_React$useState, 2),
        isOpen = _React$useState2[0],
        setIsOpen = _React$useState2[1];

    var _React$useState3 = React.useState({}),
        _React$useState4 = _slicedToArray(_React$useState3, 2),
        candidates = _React$useState4[0],
        setCandidates = _React$useState4[1];

    React.useEffect(function () {
        if (!isOpen) {
            return;
        }
        fetch("/api/donors/" + orgname).then(function (response) {
            return response.json();
        }).then(function (donor) {
            console.log("Got donor response", donor);
            setCandidates(donor.donor);
        });
    }, [isOpen, orgname]);

    return React.createElement(
        ReactBootstrap.Card,
        null,
        React.createElement(
            ReactBootstrap.Card.Header,
            null,
            React.createElement(
                ReactBootstrap.Accordion.Toggle,
                { "class": "orgname-button", as: ReactBootstrap.Button, onClick: function onClick() {
                        setIsOpen(true);
                    }, variant: "link", eventKey: orgname },
                React.createElement(
                    "h4",
                    { "class": "orgname" },
                    orgname
                )
            )
        ),
        candidates.candidates && React.createElement(
            ReactBootstrap.Accordion.Collapse,
            { eventKey: orgname },
            React.createElement(
                ReactBootstrap.Card.Body,
                null,
                React.createElement(
                    "p",
                    { "class": "orgname-txt" },
                    "Since 2018, ",
                    React.createElement(
                        "strong",
                        null,
                        orgname
                    ),
                    " has given"
                ),
                React.createElement(
                    "p",
                    { "class": "dems" },
                    candidates.totals.d_perc,
                    "% to Democrats"
                ),
                React.createElement(
                    "p",
                    { "class": "and" },
                    " and "
                ),
                React.createElement(
                    "p",
                    { "class": "reps" },
                    candidates.totals.r_perc,
                    "% to Republicans."
                ),
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        ReactBootstrap.Table,
                        { "class": "table", striped: true, bordered: true, hover: true, size: "sm" },
                        React.createElement(
                            "thead",
                            { "class": "thead" },
                            React.createElement(
                                "tr",
                                null,
                                React.createElement(
                                    "td",
                                    { "class": "amount-row" },
                                    React.createElement(
                                        "strong",
                                        null,
                                        "Amount"
                                    )
                                ),
                                React.createElement(
                                    "td",
                                    { "class": "party-row" },
                                    React.createElement(
                                        "strong",
                                        null,
                                        "Party-State"
                                    )
                                ),
                                React.createElement(
                                    "td",
                                    { "class": "candidate-row" },
                                    React.createElement(
                                        "strong",
                                        null,
                                        "Candidate"
                                    )
                                )
                            )
                        ),
                        React.createElement(
                            "tbody",
                            { "class": "tbody" },
                            candidates.candidates.map(function (candidate) {
                                return React.createElement(
                                    "tr",
                                    { key: candidate.firstlast },
                                    React.createElement(
                                        "td",
                                        null,
                                        "$",
                                        candidate.total.toLocaleString()
                                    ),
                                    React.createElement(
                                        "td",
                                        null,
                                        candidate.party,
                                        "-",
                                        candidate.state
                                    ),
                                    React.createElement(
                                        "td",
                                        null,
                                        React.createElement(
                                            "a",
                                            { "class": "candidate-name", href: "http://www.google.com/search?q=" + candidate.firstlast + "&btnI" },
                                            candidate.firstlast
                                        )
                                    )
                                );
                            })
                        )
                    )
                )
            )
        )
    );
}

function Industry(_ref2) {
    var catcode = _ref2.catcode,
        catname = _ref2.catname,
        openCatname = _ref2.openCatname,
        setOpenCatname = _ref2.setOpenCatname,
        searchResult = _ref2.searchResult;

    var _React$useState5 = React.useState({}),
        _React$useState6 = _slicedToArray(_React$useState5, 2),
        donors = _React$useState6[0],
        setDonors = _React$useState6[1];
    // const isOpen = catname==openCatname;
    // ^^ vv just swap these two if you want to expand all candidates


    var isOpen = true;
    React.useEffect(function () {
        if (!isOpen) {
            return;
        }
        fetch("/api/industries/" + catcode).then(function (response) {
            return response.json();
        }).then(function (industry) {
            console.log("Got industry response", industry);
            setDonors(industry.industry);
        });
    }, [isOpen, catcode]);
    var sortedDonation = donors.total_donated ? Object.entries(donors.total_donated).filter(function (entry) {
        return entry[0].toLowerCase().includes(searchResult);
    }).sort(function (_ref3, _ref4) {
        var _ref6 = _slicedToArray(_ref3, 2),
            amount1 = _ref6[1];

        var _ref5 = _slicedToArray(_ref4, 2),
            amount2 = _ref5[1];

        return amount2 - amount1;
    }).reduce(function (r, _ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
            orgname = _ref8[0],
            amount = _ref8[1];

        return _extends({}, r, _defineProperty({}, orgname, amount));
    }, {}) : {};
    if (sortedDonation.length >= 0) {
        return React.createElement("div", null);
    }

    return React.createElement(
        ReactBootstrap.Card,
        null,
        React.createElement(
            ReactBootstrap.Card.Header,
            null,
            React.createElement(
                ReactBootstrap.Button,
                {
                    "class": "btn-primary",
                    onClick: function onClick() {
                        return setOpenCatname(catname);
                    },
                    "aria-controls": "collapse-" + catcode,
                    "aria-expanded": isOpen
                },
                React.createElement(
                    "p",
                    null,
                    catname
                )
            )
        ),
        donors.organizations && React.createElement(
            ReactBootstrap.Collapse,
            { "in": isOpen },
            React.createElement(
                ReactBootstrap.Card.Body,
                null,
                Object.keys(sortedDonation).map(function (organization) {

                    return React.createElement(Donor, { key: organization, orgname: organization, totalAmount: sortedDonation[organization] });
                })
            )
        )
    );
}

function AllIndustries(_ref9) {
    var searchResult = _ref9.searchResult;

    console.log("hi margaret search result is:", searchResult);

    var _React$useState7 = React.useState([]),
        _React$useState8 = _slicedToArray(_React$useState7, 2),
        industries = _React$useState8[0],
        setIndustries = _React$useState8[1];

    var _React$useState9 = React.useState(null),
        _React$useState10 = _slicedToArray(_React$useState9, 2),
        openCatname = _React$useState10[0],
        setOpenCatname = _React$useState10[1];

    React.useEffect(function () {
        fetch('/api/industries').then(function (response) {
            return response.json();
        }).then(function (industries) {
            return setIndustries(industries.industries);
        });
    }, []);
    if (industries.length === 0) return React.createElement(
        "div",
        null,
        React.createElement(
            ReactBootstrap.Spinner,
            { "class": "spinner", animation: "border", role: "status" },
            React.createElement(
                "span",
                { className: "sr-only" },
                "Loading..."
            )
        )
    );
    var content = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = industries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var industry = _step.value;

            content.push(React.createElement(Industry, { key: industry.catcode, catcode: industry.catcode, catname: industry.catname, openCatname: openCatname, setOpenCatname: setOpenCatname, searchResult: searchResult }));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return React.createElement(
        "div",
        { "class": "browse-container" },
        React.createElement(
            "div",
            { "class": "browse-flex" },
            React.createElement(
                "p",
                { "class": "browse-companies" },
                "Browse Companies"
            ),
            React.createElement(
                "p",
                { "class": "select-company" },
                "Select a food industry to get started, then select a company to uncover which politicians they financed."
            ),
            React.createElement(
                ReactBootstrap.Accordion,
                null,
                content
            )
        )
    );
}

function Candidate(_ref10) {
    var firstlast = _ref10.firstlast,
        state = _ref10.state,
        party = _ref10.party;

    var _React$useState11 = React.useState(false),
        _React$useState12 = _slicedToArray(_React$useState11, 2),
        isOpen = _React$useState12[0],
        setIsOpen = _React$useState12[1];

    var _React$useState13 = React.useState({}),
        _React$useState14 = _slicedToArray(_React$useState13, 2),
        orgs = _React$useState14[0],
        setOrgs = _React$useState14[1];

    React.useEffect(function () {
        if (!isOpen) {
            return;
        }
        fetch("/api/candidates/" + firstlast).then(function (response) {
            return response.json();
        }).then(function (candidate) {
            console.log("Got candidate response", candidate);
            setOrgs(candidate.candidate);
        });
    }, [isOpen, firstlast]);

    return React.createElement(
        ReactBootstrap.Card,
        null,
        React.createElement(
            ReactBootstrap.Card.Header,
            null,
            React.createElement(
                ReactBootstrap.Accordion.Toggle,
                { "class": "orgname-button", as: ReactBootstrap.Button, onClick: function onClick() {
                        setIsOpen(true);
                    }, variant: "link", eventKey: firstlast },
                React.createElement(
                    "h4",
                    { "class": "orgname" },
                    firstlast,
                    " (",
                    party,
                    ")"
                )
            )
        ),
        orgs.orgs && React.createElement(
            ReactBootstrap.Accordion.Collapse,
            { eventKey: firstlast },
            React.createElement(
                ReactBootstrap.Card.Body,
                null,
                React.createElement(
                    "p",
                    { "class": "politician-txt" },
                    "Since 2018, ",
                    React.createElement(
                        "strong",
                        null,
                        firstlast
                    ),
                    " has received",
                    React.createElement("br", null),
                    "campaign contributions from:"
                ),
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        ReactBootstrap.Table,
                        { "class": "table", striped: true, bordered: true, hover: true, size: "sm" },
                        React.createElement(
                            "thead",
                            { "class": "thead" },
                            React.createElement(
                                "tr",
                                null,
                                React.createElement(
                                    "td",
                                    null,
                                    React.createElement(
                                        "strong",
                                        null,
                                        "Amount"
                                    )
                                ),
                                React.createElement(
                                    "td",
                                    null,
                                    React.createElement(
                                        "strong",
                                        null,
                                        "Company"
                                    )
                                )
                            )
                        ),
                        React.createElement(
                            "tbody",
                            { "class": "tbody" },
                            orgs.orgs.map(function (org) {
                                return React.createElement(
                                    "tr",
                                    { key: org.orgname },
                                    React.createElement(
                                        "td",
                                        null,
                                        "$",
                                        org.amount.toLocaleString()
                                    ),
                                    React.createElement(
                                        "td",
                                        null,
                                        org.orgname
                                    )
                                );
                            })
                        )
                    )
                )
            )
        )
    );
}

function CandidateState(_ref11) {
    var firstlast = _ref11.firstlast,
        state = _ref11.state,
        party = _ref11.party,
        openState = _ref11.openState,
        setOpenState = _ref11.setOpenState;

    var _React$useState15 = React.useState({}),
        _React$useState16 = _slicedToArray(_React$useState15, 2),
        candidates = _React$useState16[0],
        setCandidates = _React$useState16[1];
    // const isOpen = state == openState;


    var isOpen = true;
    React.useEffect(function () {
        if (!isOpen) {
            return;
        }
        fetch("/api/states/" + state).then(function (response) {
            return response.json();
        }).then(function (state) {
            console.log("Got state response", state);
            setCandidates(state.state);
        });
    }, [isOpen, state]);
    return React.createElement(
        ReactBootstrap.Card,
        null,
        React.createElement(
            ReactBootstrap.Card.Header,
            null,
            React.createElement(
                ReactBootstrap.Button,
                {
                    // onClick={() => setIsOpen(!isOpen)}
                    onClick: function onClick() {
                        return setOpenState(state);
                    },
                    "aria-controls": "collapse-" + state,
                    "aria-expanded": isOpen
                },
                React.createElement(
                    "h4",
                    null,
                    state
                )
            )
        ),
        candidates.candidates && React.createElement(
            ReactBootstrap.Collapse,
            { "in": isOpen },
            React.createElement(
                ReactBootstrap.Card.Body,
                null,
                candidates.candidates.map(function (candidate) {
                    return React.createElement(Candidate, { key: candidate.firstlast, firstlast: candidate.firstlast, state: candidate.state, party: candidate.party });
                })
            )
        )
    );
}

function AllStates() {
    var _React$useState17 = React.useState([]),
        _React$useState18 = _slicedToArray(_React$useState17, 2),
        states = _React$useState18[0],
        setStates = _React$useState18[1];

    var _React$useState19 = React.useState(null),
        _React$useState20 = _slicedToArray(_React$useState19, 2),
        openState = _React$useState20[0],
        setOpenState = _React$useState20[1];

    React.useEffect(function () {
        fetch('/api/states').then(function (response) {
            return response.json();
        }).then(function (states) {
            return setStates(states.states);
        });
    }, []);
    if (states.length === 0) return React.createElement(
        "div",
        null,
        React.createElement(
            ReactBootstrap.Spinner,
            { "class": "spinner", animation: "border", role: "status" },
            React.createElement(
                "span",
                { className: "sr-only" },
                "Loading..."
            )
        )
    );
    var content = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = states[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var state = _step2.value;

            content.push(React.createElement(CandidateState, { key: state,
                state: state,
                openState: openState,
                setOpenState: setOpenState }));
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }

    return React.createElement(
        "div",
        { "class": "browse-container" },
        React.createElement(
            "div",
            { "class": "browse-flex" },
            React.createElement(
                "p",
                { "class": "browse-companies" },
                "Browse Politicians"
            ),
            React.createElement(
                "p",
                { "class": "select-company" },
                "First select a US state, then select a politician to uncover which companies financed their campaign."
            ),
            React.createElement(
                ReactBootstrap.Accordion,
                null,
                content
            )
        )
    );
}

function QuizContainer() {
    var _React$useState21 = React.useState(1),
        _React$useState22 = _slicedToArray(_React$useState21, 2),
        questionNum = _React$useState22[0],
        setQuestionNum = _React$useState22[1];
    // 1 is initial state, setQuestionNum is function for changing state


    function goToNextQuestion() {
        setQuestionNum(questionNum + 1);
        // function called goToNextQuestion that changes the state to questionNum +1
    }

    var _React$useState23 = React.useState({}),
        _React$useState24 = _slicedToArray(_React$useState23, 2),
        quizResults = _React$useState24[0],
        setQuizResults = _React$useState24[1];
    // quizResults is empty object, setQuizResult is function for changing state


    function quizFinished(quizResult, billName) {
        setQuizResults(_extends(_defineProperty({}, billName, quizResult), quizResults));
        // function called quizFinished that sets the quizResults to an object where the key is billName and the value is the quizResult -- do this for all quizResults
    }

    var _React$useState25 = React.useState(null),
        _React$useState26 = _slicedToArray(_React$useState25, 2),
        name = _React$useState26[0],
        setName = _React$useState26[1];
    // initial state for name is null


    var _React$useState27 = React.useState(null),
        _React$useState28 = _slicedToArray(_React$useState27, 2),
        resultId = _React$useState28[0],
        setResultId = _React$useState28[1];
    // initial state for resultID is null


    function handleSubmit(event) {
        event.preventDefault();
        // when the button for submitting results is clicked...
        return fetch('/api/quiz_result', {
            // posting the quizResults and full_name as a JSON object to the database
            method: 'POST',
            body: JSON.stringify({ results: quizResults, full_name: name }),
            headers: { 'Content-Type': 'application/json' }
        }).then(function (response) {
            return response.json();
        }).then(function (data) {
            console.log(data);
            return setResultId(data.result_id);
        })
        // resultID is set as the number for resultID that you get back from the JSON response, which is autoincremented
        .catch(function (err) {
            return console.log(err);
        });
    }

    return React.createElement(
        "div",
        null,
        React.createElement(
            "h3",
            { "class": "quiz-head" },
            "Eat Drink Vote Quiz"
        ),
        React.createElement(
            "p",
            { "class": "why-matter" },
            "Why does it matter? Take a quiz to find out how your values align with those of the big corporations."
        ),
        questionNum >= 1 && React.createElement(Quiz, { goToNextQuestion: goToNextQuestion, quizFinished: quizFinished, billName: "Raise the Wage Act", billText: "Do you think the federal minimum wage should be raised to $15/hr?", companies: ["Domino's Pizza", "McDonald's Corp", "Taco Bell", "Starbucks Corp"], yesOrNo: ["Yes", "No"] }),
        questionNum >= 2 && React.createElement(Quiz, { goToNextQuestion: goToNextQuestion, quizFinished: quizFinished, billName: "CURD Act", billText: "Do you think that the label 'natural cheese' should apply to plant-based cheese alternatives?", companies: ["Land O'Lakes", "Stonyfield Farms", "Leprino Foods", "Tyson Foods"], yesOrNo: ["Yes", "No"] }),
        questionNum >= 3 && React.createElement(Quiz, { goToNextQuestion: goToNextQuestion, quizFinished: quizFinished, billName: "Agriculture Improvement Act", billText: "Do you think that there should be a limit on number of federal subsidies for corporate mega-farms?", companies: ["PepsiCo Inc", "Coca-Cola Co", "Walmart Inc", "Jelly Belly Candy"], yesOrNo: ["Yes", "No"] }),
        questionNum > 3 && React.createElement(
            "form",
            { action: "/result/:resultId", method: "POST" },
            React.createElement(
                "div",
                { "class": "save-results-container" },
                React.createElement(
                    "div",
                    { "class": "save-results-flex" },
                    React.createElement(
                        "div",
                        { "class": "done" },
                        "Surprised by what you learned?"
                    ),
                    React.createElement(
                        "div",
                        { "class": "done-text" },
                        " Enter your name to get a personalized, shareable results link:"
                    ),
                    React.createElement(
                        "label",
                        null,
                        React.createElement("input", { type: "text", placeholder: "Your name", name: "name", onChange: function onChange(event) {
                                setName(event.target.value);
                            } })
                    ),
                    React.createElement(
                        "button",
                        { type: "button", "class": "submit-button", onClick: handleSubmit },
                        "Submit"
                    ),
                    React.createElement(
                        "p",
                        { "class": "result-button-wrap" },
                        resultId && React.createElement(
                            "a",
                            { "class": "home-button", href: "/result/" + resultId },
                            "Quiz Result for ",
                            name
                        )
                    )
                )
            )
        )
    );
}

// summary of quizcontainer: this is the component that we use to determine question number, advance to the next question, 
// determine that the quiz is done, post our results to the database, get back a resultID that we give to the user as link
// we are passing props for goToNextQuestion and quizFinished to quiz component


function Quiz(_ref12) {
    var billName = _ref12.billName,
        billText = _ref12.billText,
        companies = _ref12.companies,
        goToNextQuestion = _ref12.goToNextQuestion,
        quizFinished = _ref12.quizFinished,
        initialYesNo = _ref12.initialYesNo,
        initialSelectedCompany = _ref12.initialSelectedCompany;

    var _React$useState29 = React.useState(initialYesNo),
        _React$useState30 = _slicedToArray(_React$useState29, 2),
        yesNo = _React$useState30[0],
        setYesNo = _React$useState30[1];
    // initial state is called initialYesNo -- we will pass this in when we make quiz results page!


    var _React$useState31 = React.useState(initialSelectedCompany),
        _React$useState32 = _slicedToArray(_React$useState31, 2),
        selectedCompany = _React$useState32[0],
        setSelectedCompany = _React$useState32[1];
    // initial state is called initialSelectedCompany -- we will pass this in when we make quiz results page


    var _React$useState33 = React.useState(null),
        _React$useState34 = _slicedToArray(_React$useState33, 2),
        answer = _React$useState34[0],
        setAnswer = _React$useState34[1];
    // initial state of answer is none --> is set when we get the API response back!

    var companyNameToImage = {
        "McDonald's Corp": '/static/css/mcdonalds.png',
        'Taco Bell': '/static/css/tacobell.jpg',
        'PepsiCo Inc': '/static/css/pepsi.png',
        "Domino's Pizza": '/static/css/dominos.jpg',
        "Coca-Cola Co": '/static/css/cocacola.png',
        "Molson Coors Brewing": '/static/css/coors.jpeg',
        "Target Corp": '/static/css/target.png',
        "Walmart Inc": '/static/css/walmart.jpg',
        "Tyson Foods": '/static/css/tyson.png',
        "Waffle House Inc": '/static/css/waffle.png',
        "Russell Stover Candies": '/static/css/rsc.png',
        "Meijer Inc": '/static/css/meijer.png',
        "Jelly Belly Candy": '/static/css/jelly.jpg',
        "Trident Seafoods": '/static/css/trident.png',
        "Starbucks Corp": '/static/css/starbucks.jpg',
        "Leprino Foods": '/static/css/leprino.png',
        "Land O'Lakes": '/static/css/landolakes.jpeg',
        "Stonyfield Farms": '/static/css/stonyfield.jpg'
        // company name to image object

    };React.useEffect(function () {
        if (!yesNo || !selectedCompany) {
            return;
        }
        // if yesNo and selectedCompany do not exist yet (if the user has not started the quiz) --> don't do anything just return
        fetch("/api/answer/" + billName + "/" + yesNo + "/" + selectedCompany).then(function (response) {
            return response.json();
        }).then(function (response) {
            console.log("Got answer response", response);
            setAnswer(response.response);
            // we get a response back from the API call that has the answer (incl candidate count, vote of company, total donated) --> and we setAnswer to be this response
            goToNextQuestion();
            // then we call the goToNextQuestion function to advance the question number and show the next question

            var quizResult = {
                billName: billName,
                billText: billText,
                yesNo: yesNo,
                selectedCompany: selectedCompany
                // from our API repsonse, quizResult constant is a dictionary with billName, billText, yesNo, selectedCompany

            };quizFinished(quizResult, billName);
            // once we've gone through all of the question, we call quizFinished (inherited from quizcontainer) sets the quizResults to an object where the key is billName and the value is the quizResult
            // this component is all about just the quiz questions. we can't call quizFinished here because we need all of the questions to be collected together at the end
        });
    }, [yesNo, selectedCompany]);
    // if yesNo and selectedCompany have changed, re-render the component

    function handleSubmit(event) {
        event.preventDefault();
    }
    // there will be a button
    var companiesContent = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
        for (var _iterator3 = companies[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var company = _step3.value;

            // companies is coming from quizContainer --> we hard-coded them for each quiz question
            companiesContent.push(React.createElement(
                "div",
                { "class": "flex-nested-item" },
                React.createElement(
                    "label",
                    null,
                    React.createElement("input", { "class": "radio", type: "radio", name: "brand", checked: selectedCompany === company, value: company, onChange: function onChange(e) {
                            return setSelectedCompany(e.target.value);
                        } }),
                    React.createElement("img", { "class": "brand-img", src: companyNameToImage[company] }),
                    "   ",
                    company
                )
            ));
        }
        // into the array companiesContent we are pushing the radio buttons for each company. when a company button is selected, we setSelectedCompany to that company that the user chose.
    } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                _iterator3.return();
            }
        } finally {
            if (_didIteratorError3) {
                throw _iteratorError3;
            }
        }
    }

    console.log("Quiz() answer", answer);
    return React.createElement(
        "form",
        { onSubmit: handleSubmit },
        React.createElement(
            "div",
            { "class": "container" },
            React.createElement(
                "div",
                { "class": "flex-item" },
                React.createElement(
                    "h5",
                    null,
                    billText
                ),
                React.createElement(
                    "div",
                    { "class": "flex-nested-item" },
                    React.createElement(
                        "label",
                        null,
                        React.createElement("input", { type: "radio", "class": "radio", checked: yesNo === "No", value: "No", onChange: function onChange(e) {
                                return setYesNo(e.target.value);
                            } }),
                        "    Yes"
                    )
                ),
                React.createElement(
                    "div",
                    { "class": "flex-nested-item" },
                    React.createElement(
                        "label",
                        null,
                        React.createElement("input", { type: "radio", "class": "radio", checked: yesNo === "Yes", value: "Yes", onChange: function onChange(e) {
                                return setYesNo(e.target.value);
                            } }),
                        "    No"
                    )
                )
            )
        ),
        React.createElement(
            "div",
            { "class": "container" },
            React.createElement(
                "div",
                { "class": "flex-item" },
                React.createElement(
                    "h5",
                    null,
                    "Which of these brands do you think agreed with your vote?"
                ),
                React.createElement(
                    "div",
                    { "class": "flex-nested-item" },
                    "   ",
                    companiesContent,
                    " "
                )
            )
        ),
        React.createElement(
            "div",
            { "class": "answer-container" },
            answer && yesNo == "No" &&
            // if answer is not null and if yesNo is equal to No, show "you guessed incorrectly" etc.
            React.createElement(
                "div",
                { "class": "answer-flex" },
                React.createElement(
                    "div",
                    { "class": "oh-no" },
                    "You guessed incorrectly!"
                ),
                React.createElement(
                    "div",
                    { "class": "answer" },
                    selectedCompany,
                    " gave $",
                    answer.total_received.toLocaleString(),
                    " to ",
                    answer.candidate_count,
                    " politicians who voted ",
                    yesNo,
                    " on the ",
                    billName,
                    " in 2018."
                )
            ),
            React.createElement(
                "div",
                { "class": "answer-container" },
                answer && yesNo == "Yes" &&
                // if answer is not null and yesNo is equal to Yes, show "you guessed correctly" etc.
                React.createElement(
                    "div",
                    { "class": "answer-flex" },
                    React.createElement(
                        "div",
                        { "class": "oh-yes" },
                        "You're right!"
                    ),
                    React.createElement(
                        "div",
                        { "class": "answer" },
                        selectedCompany,
                        " gave $",
                        answer.total_received.toLocaleString(),
                        " to ",
                        answer.candidate_count,
                        " politicians who voted ",
                        yesNo,
                        " on the ",
                        billName,
                        " in 2018."
                    )
                )
            )
        )
    );
}

// this is the componet that renders each quiz question individually. it is not responsible for advancing the quiz or indicating the quiz is finished.
// we are getting an API response with the answer info. then we compare this against what the user said and that dictates what the "you are correct" etc. statement reads


function Result() {
    var _ReactRouterDOM$usePa = ReactRouterDOM.useParams(),
        resultId = _ReactRouterDOM$usePa.resultId;
    // we will use resultID to define a path to result for that ID --> resultID will be a parameter


    var _React$useState35 = React.useState(null),
        _React$useState36 = _slicedToArray(_React$useState35, 2),
        result = _React$useState36[0],
        setResult = _React$useState36[1];
    // initial state of result is null


    var _React$useState37 = React.useState(null),
        _React$useState38 = _slicedToArray(_React$useState37, 2),
        name = _React$useState38[0],
        setName = _React$useState38[1];
    // initial state of name is null
    // states are things that have the potential to change!


    React.useEffect(function () {
        fetch("/api/quiz_result/" + resultId).then(function (response) {
            return response.json();
        }).then(function (result) {
            console.log("urrrrrrr got result", result);
            // collect response from API for that resultID (which is a dictionary with key "result" that has values resultID, name, and results_json)
            setResult(result.quiz_result);
            // using the API response, setResult to quiz_result from result of API call
            setName(result.quiz_result.full_name);
            // do the same as above for name
        });
    }, []);
    if (!result) return React.createElement(
        "div",
        null,
        React.createElement(
            ReactBootstrap.Spinner,
            { "class": "spinner", animation: "border", role: "status" },
            React.createElement(
                "span",
                { className: "sr-only" },
                "Loading..."
            )
        )
    );
    return React.createElement(
        "div",
        { "class": "results-parent" },
        React.createElement(
            "div",
            { "class": "results-container" },
            React.createElement(
                "div",
                { "class": "results-flex-item" },
                React.createElement(
                    "p",
                    { "class": "result-h" },
                    " Quiz Result for:"
                ),
                React.createElement(
                    "p",
                    { "class": "result-name" },
                    " ",
                    name
                ),
                React.createElement(
                    "a",
                    { href: "https://twitter.com/share?ref_src=twsrc%5Etfw", "class": "twitter-share-button", "data-size": "large", "data-text": "I took a quiz on political donation patterns of big food companies -- want to see how I did?", "data-hashtags": "#campaignfinance #corporatelobbying", "data-show-count": "false" },
                    "Tweet"
                ),
                React.createElement("script", { async: true, src: "https://platform.twitter.com/widgets.js", charset: "utf-8" }),
                React.createElement(Quiz, { goToNextQuestion: function goToNextQuestion() {
                        return null;
                    }, quizFinished: function quizFinished() {
                        return null;
                    }, initialYesNo: result.results_json['Raise the Wage Act'].yesNo, initialSelectedCompany: result.results_json['Raise the Wage Act'].selectedCompany, billName: "Raise the Wage Act", billText: "Do you think the federal minimum wage should be raised to $15/hr?", companies: [result.results_json['Raise the Wage Act'].selectedCompany] }),
                React.createElement(Quiz, { goToNextQuestion: function goToNextQuestion() {
                        return null;
                    }, quizFinished: function quizFinished() {
                        return null;
                    }, initialYesNo: result.results_json['CURD Act'].yesNo, initialSelectedCompany: result.results_json['CURD Act'].selectedCompany, billName: "CURD Act", billText: "Do you think that the label 'natural cheese' should apply to plant-based cheese alternatives?", companies: [result.results_json['CURD Act'].selectedCompany] }),
                React.createElement(Quiz, { goToNextQuestion: function goToNextQuestion() {
                        return null;
                    }, quizFinished: function quizFinished() {
                        return null;
                    }, initialYesNo: result.results_json['Agriculture Improvement Act'].yesNo, initialSelectedCompany: result.results_json['Agriculture Improvement Act'].selectedCompany, billName: "Agriculture Improvement Act", billText: "Do you think that there should be a limit on number of federal subsidies for corporate mega-farms?", companies: [result.results_json['Agriculture Improvement Act'].selectedCompany] })
            )
        )
    )
    // render the results for the specific user/resultID
    ;
}

function Home() {
    return React.createElement(
        "div",
        null,
        React.createElement(
            "div",
            null,
            React.createElement(
                "p",
                { "class": "title-h" },
                "Eat Drink Vote"
            ),
            React.createElement(
                "p",
                { "class": "title-p" },
                "Uncover how big food companies take political stances."
            ),
            React.createElement(
                "p",
                { "class": "title-p" },
                "Satisfy you appetite for transparency."
            ),
            React.createElement(
                "p",
                { "class": "button-wrap" },
                React.createElement(
                    "a",
                    { "class": "home-button", href: "/companies" },
                    "Browse Companies"
                )
            )
        ),
        React.createElement("div", { "class": "bar" })
    );
}

function About() {
    return React.createElement(
        React.Fragment,
        null,
        React.createElement(
            "p",
            { "class": "about-h" },
            "About"
        ),
        React.createElement(
            "p",
            { "class": "about-p" },
            React.createElement(
                "p",
                null,
                "Our food choices are extensions of our identities. We gravitate toward food brands that we know and love, ones that evoke nostalgia and bring comfort."
            ),
            React.createElement(
                "p",
                null,
                "Our food choices are also reflections of our values. For example, one might try to minimize meat consumption to prioritize animal welfare or to take action on climate change."
            ),
            React.createElement(
                "p",
                null,
                "As consumers, we strive to balance our health, likings, and values when we make decisions about what to put on our table."
            ),
            React.createElement(
                "p",
                null,
                "But, are our values shared by the food companies that we know, love, and patronize? "
            ),
            React.createElement(
                "p",
                null,
                "Food companies, like other big businesses, lobby the politicians who shape the policies that regulate the food industry -- and that may or may not align with our values."
            ),
            React.createElement(
                "p",
                null,
                "As consumers, we are entitled to transparency and truth. The Eat Drink Vote app will help you make sense of what is really behind the food label -- both nutritionally and politically."
            )
        )
    );
}

function NavBar(_ref13) {
    var searchResult = _ref13.searchResult,
        setSearchResult = _ref13.setSearchResult;

    return React.createElement(
        "div",
        null,
        React.createElement(
            ReactBootstrap.Navbar,
            { "class": "nav", variant: "dark" },
            React.createElement(
                ReactBootstrap.Navbar.Brand,
                { href: "/" },
                "Eat Drink Vote"
            ),
            React.createElement(ReactBootstrap.Navbar.Toggle, { "aria-controls": "basic-navbar-nav" }),
            React.createElement(
                ReactBootstrap.Navbar.Collapse,
                { id: "basic-navbar-nav" },
                React.createElement(
                    ReactBootstrap.Nav,
                    { className: "mr-auto" },
                    React.createElement(
                        ReactRouterDOM.Link,
                        { to: "/companies", className: "nav-link" },
                        "Browse Companies"
                    ),
                    React.createElement(
                        ReactRouterDOM.Link,
                        { to: "/politicians", className: "nav-link" },
                        "Browse Politicians"
                    ),
                    React.createElement(
                        ReactRouterDOM.Link,
                        { to: "/quiz", className: "nav-link" },
                        "Why It Matters Quiz"
                    ),
                    React.createElement(
                        ReactRouterDOM.Link,
                        { to: "/about", className: "nav-link" },
                        "About"
                    )
                ),
                React.createElement(
                    ReactBootstrap.Form,
                    { inline: true },
                    React.createElement("input", { "class": "search-bar", value: searchResult, onChange: function onChange(event) {
                            return setSearchResult(event.target.value);
                        }, type: "text", placeholder: " Search", className: "mr-sm-2" })
                )
            )
        )
    );
}

function App() {
    var _React$useState39 = React.useState(''),
        _React$useState40 = _slicedToArray(_React$useState39, 2),
        searchResult = _React$useState40[0],
        setSearchResult = _React$useState40[1];

    return React.createElement(
        ReactRouterDOM.BrowserRouter,
        null,
        React.createElement(NavBar, { searchResult: searchResult, setSearchResult: setSearchResult }),
        React.createElement(
            ReactRouterDOM.Switch,
            null,
            React.createElement(
                ReactRouterDOM.Route,
                { path: "/", exact: true },
                React.createElement(Home, null)
            ),
            React.createElement(
                ReactRouterDOM.Route,
                { path: "/companies", exact: true },
                React.createElement(AllIndustries, { searchResult: searchResult })
            ),
            React.createElement(
                ReactRouterDOM.Route,
                { path: "/politicians", exact: true },
                React.createElement(AllStates, null)
            ),
            React.createElement(
                ReactRouterDOM.Route,
                { path: "/quiz", exact: true },
                React.createElement(QuizContainer, null)
            ),
            React.createElement(
                ReactRouterDOM.Route,
                { path: "/about", exact: true },
                React.createElement(About, null)
            ),
            React.createElement(
                ReactRouterDOM.Route,
                { path: "/result/:resultId" },
                React.createElement(Result, null)
            )
        )
    );
}

ReactDOM.render(React.createElement(App, null), document.getElementById('root'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,</script></head>
<body>
  <div id="root"><div><nav class="navbar navbar-expand navbar-dark"><a href="http://0.0.0.0:5000/" class="navbar-brand">Eat Drink Vote</a><button aria-controls="basic-navbar-nav" type="button" aria-label="Toggle navigation" class="navbar-toggler collapsed"><span class="navbar-toggler-icon"></span></button><div class="navbar-collapse collapse" id="basic-navbar-nav"><div class="mr-auto navbar-nav"><a class="nav-link" href="http://0.0.0.0:5000/companies">Browse Companies</a><a class="nav-link" href="http://0.0.0.0:5000/politicians">Browse Politicians</a><a class="nav-link" href="http://0.0.0.0:5000/quiz">Why It Matters Quiz</a><a class="nav-link" href="http://0.0.0.0:5000/about">About</a></div><form class="form-inline"><input class="mr-sm-2" type="text" placeholder=" Search" value=""></form></div></nav></div><div><h3 class="quiz-head">Eat Drink Vote Quiz</h3><p class="why-matter">Why does it matter? Take a quiz to find out how your values align with those of the big corporations.</p><form><div class="container"><div class="flex-item"><h5>Do you think the federal minimum wage should be raised to $15/hr?</h5><div class="flex-nested-item"><label><input type="radio" class="radio" value="No">    Yes</label></div><div class="flex-nested-item"><label><input type="radio" class="radio" value="Yes">    No</label></div></div></div><div class="container"><div class="flex-item"><h5>Which of these brands do you think agreed with your vote?</h5><div class="flex-nested-item">   <div class="flex-nested-item"><label><input class="radio" type="radio" name="brand" value="Domino&#39;s Pizza"><img class="brand-img" src="./Eat Drink Vote_files/dominos.jpg">   Domino's Pizza</label></div><div class="flex-nested-item"><label><input class="radio" type="radio" name="brand" value="McDonald&#39;s Corp"><img class="brand-img" src="./Eat Drink Vote_files/mcdonalds.png">   McDonald's Corp</label></div><div class="flex-nested-item"><label><input class="radio" type="radio" name="brand" value="Taco Bell"><img class="brand-img" src="./Eat Drink Vote_files/tacobell.jpg">   Taco Bell</label></div><div class="flex-nested-item"><label><input class="radio" type="radio" name="brand" value="Starbucks Corp"><img class="brand-img" src="./Eat Drink Vote_files/starbucks.jpg">   Starbucks Corp</label></div> </div></div></div><div class="answer-container"><div class="answer-container"></div></div></form></div></div>
  <script type="text/jsx" src="./Eat Drink Vote_files/allDonors.jsx"></script>


</body></html>